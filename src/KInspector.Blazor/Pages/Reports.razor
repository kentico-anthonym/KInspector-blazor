@page "/reports"
@using KInspector.Blazor.Components.Modules
@using KInspector.Core.Modules
@using KInspector.Core.Repositories.Interfaces
@using KInspector.Core.Services.Interfaces
@inherits LayoutComponentBase
@inject IModuleService moduleService
@inject IReportRepository reportRepository
@inject IJSRuntime js

<PageTitle>Reports</PageTitle>

<h1 class="mb-8 text-4xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white md:text-5xl lg:text-6xl">Reports</h1>

<ModuleFilters Tags="UsedTags" FiltersChanged="UpdateState" @ref="Filters" />

<div class="space-y-8 lg:space-y-0">
    @foreach (var report in ReportList)
    {
        <ReportAccordion Report="@report" />
    }
</div>

@code {
    ModuleFilters? Filters;

    private IEnumerable<IReport> ReportList
    {
        get
        {
            var tag = Filters?.SelectedTag;
            var showUntested = Filters?.ShowUntested ?? false;
            var showIncompatible = Filters?.ShowIncompatible ?? false;

            return moduleService.GetReports(showUntested, showIncompatible, tag);
        }
    }

    private IEnumerable<string> UsedTags
    {
        get
        {
            var reports = reportRepository.GetReports();
            var tags = Enumerable.Empty<string>();
            foreach (var r in reports)
            {
                tags = tags.Union(r.Tags);
            }

            return tags;
        }
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        // Init Flowbite every time, not just first load as accordions added to the layout by filters
        // don't function without Flowbite
        await js.InvokeVoidAsync("window.initializeFlowbite");
    }

    private void UpdateState()
    {
        StateHasChanged();
    }
}
