@using KInspector.Core.Models
@using KInspector.Core.Modules
@using KInspector.Core.Services.Interfaces
@using System.Reflection
@using Markdig
@inject IModuleMetadataService moduleMetadataService

<div id="body-@Module!.Codename" class="hidden module-body bg-gray-100 dark:bg-gray-800" aria-labelledby="heading-@Module!.Codename">
    <div class="p-5 module-description text-gray-500 dark:text-gray-400 border border-b-0 border-gray-200 dark:border-gray-700">
        @if (Module is IAction)
        {
            <ActionOptionForm @ref="Form" OptionsType="OptionType" />
        }

        <button type="button"
            @onclick="RunHandler!"
            class="text-blue-700 hover:text-white border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 dark:border-blue-500 dark:text-blue-500 dark:hover:text-white dark:hover:bg-blue-500 dark:focus:ring-blue-800">
            Run
        </button>
        @LongDescription
    </div>
    @if (Results is not null)
    {
        <ModuleResult Results="@Results" />
    }
</div>

@code {
    [Parameter, EditorRequired]
    public IModule? Module { get; set; }

    [Parameter, EditorRequired]
    public Action? RunHandler { get; set; }

    [Parameter]
    public ModuleResults? Results { get; set; }

    private ActionOptionForm? Form { get; set; }

    private ModuleDetails ModuleDetails => moduleMetadataService.GetModuleDetails(Module!.Codename);

    private MarkupString LongDescription => new MarkupString(Markdown.ToHtml(ModuleDetails.LongDescription ?? string.Empty));

    public Type OptionType => ((IAction)Module!).GetOptionsType();

    public object? GetOptions() => Form!.Options;
}
